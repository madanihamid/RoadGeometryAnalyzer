# -*- coding: utf-8 -*-

"""
/***************************************************************************
 RoadGeometryAnalyzer
                                 A QGIS plugin
 Estimate basic road segment geometry (curve/straight) for road safety analysis.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-07
        copyright            : (C) 2025 by Hamid Madani
        email                : madany.hamid@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Hamid Madani'
__date__ = '2025-07-07'
__copyright__ = '(C) 2025 by Hamid Madani'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import (QCoreApplication, QVariant)
from qgis.core import (QgsProcessing,
                       QgsField,
                       QgsVectorLayer,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsFeatureRequest,
                       QgsProcessingUtils,
                       QgsMessageLog,
                       QgsProcessingProvider,
                       QgsPointXY,
                       QgsPoint,
                       QgsGeometryUtils,
                       QgsFeature,
                       QgsLineString,
                       QgsFields,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterDefinition,
                       QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform,
                       QgsProject


                       )

import math

import processing

class RoadGeometryAnalyzerAlgorithm(QgsProcessingAlgorithm):
    """
    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the input and output of the algorithm, along
        with some other properties.
        """

        # input vector features source
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )
        
        # Checkbox to enable/disable simplification inside advanced menue
        use_simplify_param = QgsProcessingParameterBoolean(
                'SIMPLIFY', 
                'Apply simplification before analysis?', 
                defaultValue=False
            )
        use_simplify_param.setFlags(use_simplify_param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(use_simplify_param)

        # Dropdown for simplification method inside advanced menue
        simplify_method_param = QgsProcessingParameterEnum(
            'SIMPLIFY_METHOD',
            'Simplification method',
            options=[
                'Distance (Douglas-Peucker)',
                'Snap to grid',
                'Area (Visvalingam)'
            ],
            defaultValue=0,
            optional=True
        )
        simplify_method_param.setFlags(simplify_method_param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(simplify_method_param)

        # simplification Tolerance input inside advanced menue
        simplify_tolerance_param = QgsProcessingParameterNumber(
            'SIMPLIFY_TOLERANCE',
            'Simplification tolerance',
            type=QgsProcessingParameterNumber.Double,
            defaultValue=1.0,
            optional=True
        )
        simplify_tolerance_param.setFlags(simplify_tolerance_param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(simplify_tolerance_param)

        #input parameter for radius
        self.addParameter(
            QgsProcessingParameterNumber(
                name='RADIUS_THRESHOLD',
                description='Curve radius threshold',
                defaultValue=2000,
                minValue=0,
                type=QgsProcessingParameterNumber.Double
            )
        )
        

        # output vector features source
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        

        # Define the fields we want in the output
        output_fields = QgsFields()
        output_fields.append(QgsField("segment_id", QVariant.String))
        output_fields.append(QgsField("type", QVariant.String))
        output_fields.append(QgsField("orientation", QVariant.String))
        output_fields.append(QgsField("radius", QVariant.Double))
        output_fields.append(QgsField("angle", QVariant.Double))
        
        radius_threshold = self.parameterAsDouble(parameters, 'RADIUS_THRESHOLD', context)
        source = self.parameterAsVectorLayer(parameters, self.INPUT, context)
        # checking simplify. if activated get parameters and run simplification.
        # we continue on vertices of input line. in our logit we can make segments from consecutive vertices that have same orientation.
        # infact we create a new segmant just if orientation is changed.
        # a simplifcation can be applied to correct possible errors in input line.
        if self.parameterAsBoolean(parameters, 'SIMPLIFY', context):
            method = self.parameterAsEnum(parameters, 'SIMPLIFY_METHOD', context)
            tolerance = self.parameterAsDouble(parameters, 'SIMPLIFY_TOLERANCE', context)
            simplify_result = processing.run(
                "native:simplifygeometries",
                {
                    'INPUT': source,
                    'METHOD': method,
                    'TOLERANCE': tolerance,
                    'OUTPUT': 'TEMPORARY_OUTPUT'
                },
                context=context,
                feedback=feedback
            )
            source = simplify_result['OUTPUT']
        
        # extract vertices from input layer (vertices is a point layer).
        vertices = processing.run("native:extractvertices", {'INPUT':source,'OUTPUT':'TEMPORARY_OUTPUT'})['OUTPUT']

        # get CRS of input layer to use it in transformations.
        source_crs = source.sourceCrs()
        
        # creating a temp layer to store lines during calculations.
        temp_line_layer = QgsVectorLayer("linestring?crs=epsg:3857", "temp_line", "memory")
        temp_line_layer.dataProvider().addAttributes([QgsField("radius",  QVariant.Double)])
        temp_line_layer.dataProvider().addAttributes([QgsField("orientation",  QVariant.String)])
        temp_line_layer.dataProvider().addAttributes([QgsField("angle",  QVariant.Double)])
        temp_line_layer.dataProvider().addAttributes([QgsField("type",  QVariant.String)])
        temp_line_layer.dataProvider().addAttributes([QgsField("segment_id",  QVariant.String)])
        temp_line_layer.updateFields()
        temp_line_layer.startEditing()

        # global variables to use during first loop.
        current_segment_id=0
        last_orientation = None

        # its not important what is CRS of our input layer! everyting would be transformed to a global metric system.
        # so radius parameter should be in meters.
        process_crs = QgsCoordinateReferenceSystem("EPSG:3857")
        transform = QgsCoordinateTransform(source_crs, process_crs, QgsProject.instance().transformContext())

        # make a list to itterate on features. QgsVectorLayer' object is not subscriptable.
        vertex_features = list(vertices.getFeatures())

        for i in range(len(vertex_features[:-2])):
            # use three point each time to create a angle and transform them.
            f1 = vertex_features[i]
            f2 = vertex_features[i+1]
            f3 = vertex_features[i+2]
            p1_orig = f1.geometry().asPoint()
            p2_orig = f2.geometry().asPoint()
            p3_orig = f3.geometry().asPoint()
            p1_transformed = transform.transform(p1_orig)
            p2_transformed = transform.transform(p2_orig)
            p3_transformed = transform.transform(p3_orig)
            p1_transformed_p = QgsPoint(p1_transformed.x(), p1_transformed.y())
            p2_transformed_p = QgsPoint(p2_transformed.x(), p2_transformed.y())
            p3_transformed_p = QgsPoint(p3_transformed.x(), p3_transformed.y())

            # extract radus that can be made by our given 3 points. its very small chance to have a infinit radius
            radus = QgsGeometryUtils.circleCenterRadius(p1_transformed_p, p2_transformed_p, p3_transformed_p)[0]

            # extract angle that can be made by our given 3 points
            angle = QgsGeometryUtils.angleBetweenThreePoints(p1_orig.x(), p1_orig.y(), p2_orig.x(), p2_orig.y(),p3_orig.x(), p3_orig.y())

            # calculate orientation (in this step there is a few chance to have straight line. i mean angle == math.pi? really?)
            if angle > math.pi:
                orientation = "clockwise"
            elif angle < math.pi:
                orientation = "counterclockwise"
            else:
                orientation = "straight"

            # set type of segments. all segmants that have radius greater than given radus consider as straight 
            if radus > radius_threshold :
                itstype = "tangent"
                orientation = "straight"
            else:
                itstype = "curve"
            
            # we are working on vertices of input line. in our logit we can make segments from consecutive vertices that have same orientation.
            # infact we create a new segmant just if orientation is changed.
            # also a simplifcation can be applied to correct possible error
            if last_orientation != orientation:
                current_segment_id = current_segment_id+1
                last_orientation = orientation
    
            # here we create a line from eact two consecutive vertices with other attributes we calculated for them.
            if p1_transformed_p != p2_transformed_p:
                temp_line = QgsFeature(temp_line_layer.fields())
                temp_line.setGeometry(QgsLineString(
                    QgsPoint(p1_transformed_p.x(), p1_transformed_p.y()),
                    QgsPoint(p2_transformed_p.x(), p2_transformed_p.y())
                ))
                temp_line.setAttribute("radius", radus)
                temp_line.setAttribute("orientation", orientation)
                temp_line.setAttribute("angle", angle)
                temp_line.setAttribute("type", itstype)
                temp_line.setAttribute("segment_id", current_segment_id)
                temp_line_layer.addFeature(temp_line)

        temp_line_layer.commitChanges()

        # aggregate temp_line_layer to create segments.
        aggparameters = {
                        'INPUT':temp_line_layer,
                        'GROUP_BY':'"segment_id"',
                     'AGGREGATES':[
                            {'aggregate': 'majority','delimiter': ',','input': '"segment_id"','length': 0,'name': 'segment_id','precision': 0,'sub_type': 0,'type': 10,'type_name': 'text'},
                            {'aggregate': 'majority','delimiter': ',','input': '"type"','length': 0,'name': 'type','precision': 0,'sub_type': 0,'type': 10,'type_name': 'text'},
                            {'aggregate': 'majority','delimiter': ',','input': '"orientation"','length': 0,'name': 'orientation','precision': 0,'sub_type': 0,'type': 10,'type_name': 'text'},
                            {'aggregate': 'mean','delimiter': ',','input': '"radius"','length': 0,'name': 'radius','precision': 0,'sub_type': 0,'type': 6,'type_name': 'double precision'},
                            {'aggregate': 'mean','delimiter': ',','input': '"angle"','length': 0,'name': 'angle','precision': 0,'sub_type': 0,'type': 6,'type_name': 'double precision'},
                    
                        ],
                        'OUTPUT':'TEMPORARY_OUTPUT'
                    }
        result = processing.run("native:aggregate", aggparameters)
        output_layer = result['OUTPUT']

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0


        # also we should convert CRS to input csr
        features = output_layer.getFeatures()
        destinition_crs = source.sourceCrs()
        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        # this step and all after this is followed from qgis plugin example!
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, output_fields, temp_line_layer.wkbType(), destinition_crs)
        

        transform_back = QgsCoordinateTransform(temp_line_layer.crs(), destinition_crs, context.transformContext())
        for current, feature in enumerate(features):
            out_feature = QgsFeature()
            geom = feature.geometry()
            geom.transform(transform_back)  # back to input CRS
            out_feature.setGeometry(geom)
            out_feature.setAttributes([
                feature["segment_id"],
                feature["type"],
                feature["orientation"],
                feature["radius"],
                feature["angle"]
            ])
            sink.addFeature(out_feature, QgsFeatureSink.FastInsert)
            feedback.setProgress(int(current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id}


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Estimate Road Geometry'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Road Safety Tools'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return RoadGeometryAnalyzerAlgorithm()
